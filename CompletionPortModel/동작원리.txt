Completion Port 모델의 동작 원리를 살펴보자.

이 모델의 핵심은 입출력 완료 포트라는 윈도우 운영체제가 제공하는 구조를 이해하는 것이다.
입출력 완료 포트(I/O Completion Port)는 비동기 입출력 결과와 이 결과를 처리할 스레드에 관한 정보를 담고 있는 구조다.

중요한 특징은 다음과 같다.

1. 생성과 파괴 : 입출력 완료 포트는 CreateIOCompletionPort를 호출하여 생성하고 CloseHandle로 파괴한다.

2. 스레드 접근 제약 : 입출력 완료 포트를 생성한 스레드 외에 다른 스레드도 접근할 수 있다.
				높은 성능을 위해 입출력 완료 포트에 접근하는 스레드를 별도로 만들어둔다.
				이를 작업자 스레드라고 부르며 이 스레드가 모든 처리를 맡는다.

3. 비동기 입출력 처리 방법 : 작업자 스레드가 GetQueuedCompletionStatus 함수를 호출한다.

=========================================================================================

전체적인 입출력 절차를 살펴보자.

1. CreateIOCompletionPort 함수를 호출하고 입출력 완료 포트를 생성한다.

2. CPU 개수에 비례하여 작업자 스레드를 만든다(시스템 함수 사용 CPU 정보 불러오기).
	이때 모든 작업자 스레드는 GetQueuedCompletionStatus() 함수를 호출하고 대기 상태로 둔다.

3. 넌블로킹 소켓을 만든다.

4. 해당 소켓에 입출력 완료 포트를 묶는다(CreateIoCompletionPort()).

5. 입출력 함수를 호출한다.
	곧바로 완료하지 않으면 소켓 함수가 SOCKET_ERROR를 리턴한다.
	이때의 오류 코드는 WSA_IO_PENDING으로 설정된다.

6. 작업 완료 후 운영체제가 알아서 입출력 완료 포트에 결과를 저장한다.
	이때 대기중인 스레드가 하나 깨어난다.
	대기 상태에서 깨어난 작업자 스레드는 비동기 입출력 결과를 처리한다.

7. 새로운 소켓을 생성하면 3~6을, 아니면 5~6을 반복한다.

==========================================================================================

좀 더 자세히 입출력 동작을 단계별로 나눠보자.

1. 응용 프로그램의 임의 스레드에서 비동기 입출력 함수를 호출한다(운영체제에 입출력 작업 요청).

2. 모든 작업 스레드가 GetQueuedCompletionStatus를 호출하여 포트를 감시한다.
	이때 완료된 작업이 없다면 다시 대기상태에 빠진다.
	대기중인 작업자 스레드 목록은 입출력 완료 포트 내부에 저장된다.

3. 입출력 작업이 완료될 때 운영체제가 결과를 완료 포트에 저장한다.
	이때 저장된 정보를 입출력 완료 패킷(I/O Completion Packet)이라고 부른다.

4. 운영체제는 입출력 완료 포트에 저장된 작업자 스레드 중 ★하나를 선택해서 깨운다.
	깨어난 작업자 스레드는 이 결과를 처리한다.
	이후 작업자 스레드는 필요에 따라 다시 비동기 입출력 함수를 호출한다.