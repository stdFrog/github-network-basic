Select 모델은 여러 소켓에 대해 함수 호출 시점(또는 호출 결과)을 알려주는 역할을 할 뿐 소켓 정보를 관리해주지는 않는다.
따라서 각 소켓에 필요한 정보(응용 프로그램 버퍼, 송/수신 바이트 정보 등)를 관리하는 기능은 응용 프로그램이 구현해야 한다.

멀티스레드를 사용하지 않고도 여러 소켓을 처리한다는 점에서 활용 가치가 높다.
뒤에서 배울 Completion Port 모델과 WSAAsyncSelect 모델도 이를 응용한 것이라 볼 수 있다.

참고로 소켓 셋을 편하게 다룰 수 있는 매크로 함수가 같이 제공된다.

FD_ZERO(fd_set *set) : 셋을 비운다(초기화)
FD_SET(SOCKET s, fd_set* set) : 소켓 s를 셋에 넣는다(읽기, 쓰기, 예외 중 1).
FD_CLR(SOCKET s, fd_set* set): 소켓 s를 셋에서 제거한다.
FD_ISSET(SOCKET s, fd_set* set) : 소켓 s가 셋에 들어 있으면 0이 아닌 값을 리턴한다. 그렇지 않으면 0을 리턴한다.

=========================================================================================

해당 예제에서 사용하는 모든 소켓은 넌블로킹 소켓이다.
그러나, 작업 관리자로 살펴보면 CPU 사용률이 매우 낮다는 것을 알 수 있다.

=========================================================================================

소켓 정보를 관리하는 구조체를 만들면 된다.

단, 소켓의 최대 개수는 FD_SETSIZE로 정해져 있으므로 이 개수만큼 사용자 정의 SOCKETINFO 구조체의 주소를 저장할 수 있도록
배열을 선언한다.

새로운 소켓이 생성되면 구조체를 동적으로 할당하고 배열에 주솟값을 저장해둔다.
소켓 정보를 삭제할 떄는 포인터 배열 중간에 빈 곳이 없도록 배열의 맨 끝에 있는 유효 원소를 삭제한 위치로 옮겨준다.

=========================================================================================