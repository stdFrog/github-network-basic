Select 모델은 select()라는 함수를 사용한다.

이 함수가 핵심 역할을 한다는 뜻에서 붙인 이름이며, 이 모델을 사용하면 소켓 모드(블로킹, 넌블로킹)와 관계없이
여러 소켓을 한 스레드로 처리할 수 있다.

* 윈도우의 select()함수는 첫번째 인수만 제외하면 리눅스의 select()함수와 기본 동작이 거의 같다.

==========================================================================================

모델의 동작 원리

Select 모델을 사용하면 소켓 함수 호출이 성공할 수 있는 시점을 미리 알 수 있다.
따라서 소켓 함수 호출 시 조건을 만족하지 않아 생기는 문제를 해결할 수 있다.

소켓 모드에 따른 Select 모델을 사용한 효과는 다음과 같다.

블로킹 : 소켓 함수 호출 시 조건을 만족하지 않아 블로킹 되는 상황을 막는다.
넌블로킹 : 소켓 함수 호출 시 조건을 만족하지 않아 나중에 다시 호출하는 상황을 막을 수 있다.
		즉, CPU 사용률이 줄어든다.

==========================================================================================

★ Select 모델을 사용하려면 세 개의 소켓 셋(set)을 준비해야 한다.

소켓 셋은 소켓의 집합으로, 호출할 함수의 종류에 따라 소켓을 담아두는 역할을 한다.

★ 예를 들면, 어떤 소켓에 대해 recv() 함수를 호출하고 싶다면 읽기 셋에 넣고, send()함수를 호출하고 싶다면 쓰기 셋에 넣는다.

select 함수는 소켓 셋에 포함된 소켓이 입출력을 위한 준비가 될 때까지 대기한다.
적어도 한 소켓이 준비되면 select() 함수는 리턴한다.

이때 소켓 셋에는 입출력이 가능한 소켓만 남고 나머지는 모두 제거된다.

예를 들어, 두 소켓에 대해 읽기가 간으하고 한 소켓에 대해 쓰기가 가능하다면
이 세 개의 소켓에 대해서 소켓 함수를 호출하여 원하는 작업을 할 수 있다.

==========================================================================================

응용 프로그램은 소켓 셋을 통해 소켓 함수를 성공적으로 호출할 수 있는 시점을 알아낼 수 있고,
드물게 소켓 함수의 호출 결과도 확인할 수 있다.

다음은 소켓 셋의 역할을 정리한 것이다.
___________________________________________________________________________________________________________________________________________________
읽기 셋의 호출 시점:
 - 접속한 클라이언트가 있으므로 accept() 함수를 호출할 수 있다.
 - 소켓 수신 버퍼에 도착한 데이터가 있으므로 recv(), recvfrom() 등의 함수를 호출하여 데이터를 읽을 수 있다.
 - TCP 연결을 종료했으므로 recv(), recvfrom() 등의 함수를 호출해서 리턴값(0)으로 연결 종료를 알 수 있다.

쓰기 셋의 호출 시점:
 - 소켓 송신 버퍼의 여유 공간이 충분하므로 send(), sendto() 등의 함수를 호출하여 데이터를 보낼 수 있다.

쓰기 셋의 호출 결과:
 - 넌블로킹 소켓을 사용한 connect() 함수 호출이 성공했다.

예외 셋의 호출 시점:
 - OOB(Out-of Band) 데이터가 도착했으므로 recv(), recvfrom() 등의 함수를 호출하여 OOB 데이터를 받을 수 있다.

에외 셋의 호출 결과:
 - 넌블로킹 소켓을 사용한 connect() 함수 호출이 실패했다.


* OOB 데이터란 긴급한(Urgent) 상황을 알리는 용도로 사용되는 특별한 데이터이며 send() 함수에 MSG_OOB 옵션을 사용한다.
* OOB 데이터는 1바이트 이상을 보낼 수 없다는 특징 떄문에 활용도가 높지 않다. 그냥 따로 채널을 두고 소켓을 하나 더 만들자.
* select() 함수의 예외 셋에 소켓을 넣어두면 OOB 데이터의 도착을 알려준다.

==========================================================================================

select() 함수의 원형을 다음과 같다.

#include <winsock2.h>
int select(
	int nfds,
	fd_set *readfds,
	fd_set *writefds,
	fd_set *exceptfds,
	const struct timeval *timeout
);

성공 시 조건을 만족하는 소켓의 개수 또는 0(타임 아웃)
실패 시 SOCKET_ERROR

1. nfds : 유닉스/리눅스와의 호환성을 위해 존재하며 윈도우에서는 무시된다.
2. readfds,writefds,exceptfds : 각각 읽기, 쓰기, 예외 셋이다. 사용하지 않으면 모두 NULL을 준다.
3. timeout : 초와 마이크로초 단위로 타임아웃을 지정한다. 이 시간이 지나면 select()함수는 무조건 리턴한다.

==========================================================================================

timeval는 두 가지 멤버를 갖는 구조체다.

> long tv_sec;
> long tv_usec;

타임 아웃 값에 따른 select() 함수의 동작은 다음과 같다.

- NULL : 적어도 한 소켓이 조건을 만족할 때까지 무한히 대기한다(리턴값: 조건 만족하는 소켓 개수).
- {0, 0} : 소켓 셋에 포함된 모든 소켓을 검사한 후 곧바로 리턴한다(리턴값: 조건 만족하는 소켓 개수).
- 양수 : 적어도 한 소켓이 조건을 만족하거나 타임아웃으로 지정한 시간이 지나면 리턴한다(리턴값 : 조건 만족하는 소켓 개수 또는 0)

==========================================================================================

select() 함수를 이용한 소켓의 입출력 절차는 다음과 같다.
단, 타임아웃은 NULL로 가정한다.

1. 소켓 셋 비운다.
2. 소켓 셋에 소켓 넣는다. 최대 개수는 FD_SETSIZE(64)로 정의되어 있다.
3. select() 함수를 호출해서 소켓 이벤트를 기다린다. 타임아웃이 NULL이면 하나라도 조건을 만족해야 리턴한다.
4. select 함수가 리턴하면 소켓 셋에 남아있는 모든 소켓에 대해 적절한 소켓 함수를 호출한다.


* FD_SETSIZE 숫자 형태를 사용하면 소켓의 최대 처리 개수를 변경할 수 있다.
단, 어느 정도까지 가능한지 공개되지 않아 테스트가 필요하다.

==========================================================================================

소켓 셋을 다루기 위한 매크로 함수가 제공된다.

FD_ZERO(fd_set *set) : 셋을 비운다
FD_SET(SOCKET sock, fd_set *set) : sock을 셋에 넣는다.
FD_CLR(SOCKET sock, fd_set *set) : sock을 셋에서 제거한다.
FD_ISSET(SOCKET sock, fd_set *set) : sock이 셋에 들어있으면 0이 아닌 값을 리턴하고 없으면 0을 리턴한다.