WSAAsyncSelect 라는 이름을 직역하여 비동기 선택 모델이라 부른다.

이 함수가 핵심 역할을 하기에 이런 이름을 붙였다.
★ 이 모델을 사용하면 소켓과 관련된 네트워크 이벤트를 윈도우 메시지 형태로 받는다.

★ 모든 소켓 관련 메시지가 하나의 윈도우, 즉 한 윈도우 프로시저에 전달되므로 멀티 스레드를 사용하지 않고도
여러 소켓을 처리할 수 있다.

==========================================================================================

이 모델 역시 소켓 함수 호출이 성공할 수 있는 시점을 알려준다.
단, 윈도우 메시지 형태로 변환되어 수신된다.

소켓 함수 호출 시 리턴 조건을 만족하지 않아 생기는 교착상태나 CPU 독점 상태를 해결할 수 있다.

==========================================================================================

WSAAsyncSelect 모델을 이용한 소켓 입출력 절차는 다음과 같다.

1. WSAAsyncSelect() 함수를 호출하여 소켓 이벤트를 알려줄 윈도우 메시지와 함께 관심있는 네트워크 이벤트를 등록한다.
	예를 들면 소켓으로 데이터를 받을 수 있는 상황이 되면 (WM_USER+1)로 정의된 윈도우 메시지로 알려달라고 등록한다.

2. 등록한 네트워크 이벤트가 발생하면, 윈도우 메시지가 발생해 윈도우 프로시저가 호출된다.

3. 윈도우 프로시저는 받은 메시지의 종류에 따라 적절한 소켓 함수를 호출하여 처리한다.

==========================================================================================

WSAAsyncSelect 함수의 원형은 다음과 같다.

#include <winsock2.h>

int WSAAsyncSelect(
	SOCKET sock,
	HWND hWnd,
	unsinged int wMsg,
	long lEvent
);

1. sock :  네트워크 이벤트를 처리하고자 하는 소켓이다.
2. hWnd : 네트워크 이벤트가 발생하면 메시지를 받을 윈도우 핸들이다.
3. wMsg : 네트워크 이벤트가 발생하면 윈도우가 받을 메시지를 등록한다.
		소켓을 위한 윈도우 메시지는 따로 정의되어 있지 않으므로 WM_USER+x 형태의 사용자 정의 메시지를 이용한다.
4. lEvent : 관심있는 네트워크 이벤트를 비트 마스크 조합으로 나타낸다.

==========================================================================================

네트워크 이벤트를 나타내는 상수는 다음과 같다.

네트워크			이벤트 의미					대응 함수
___________________________________________________________________________________________________________________________________________________
FD_ACCEPT			접속한 클라이언트가 있다.			accept()

FD_READ			데이터 수신이 가능하다.			recv(), recvfrom()

FD_WRITE			데이터 송신이 가능하다.			send(), sendto()

FD_CLOSE			상대가 접속을 종료했다.			X

FD_CONNECT		통신을 위한 연결 절차가 끝났다.		X

FD_OOB			OOB 데이터가 도착했다.			recv(), recvfrom()
___________________________________________________________________________________________________________________________________________________


위 상수를 이용한 예시를 보자.

#define WM_SOCKET (WM_USER+100)
...
WSAAsyncSelect(sock, hWnd, WM_SOCKET, FD_READ | FD_WRITE);


==========================================================================================

해당 함수를 사용할 때 주의할 점이 있는데, 정리해보면 다음과 같다.

1. 이 함수를 호출하면 해당 소켓은 자동으로 넌블로킹 모드로 전환된다.
	블로킹 소켓은 윈도우 메시지 루프를 정지시킬 가능성이 있기 때문이다.

2. accept 함수가 리턴하는 소켓은 FD_READ, FD_WRITE 이벤트를 처리해야 한다.
	즉, 연결 대기 소켓과 accept가 리턴하는 소켓은 서로 다르므로
	각각 해당 함수를 호출하여 처리할 이벤트를 등록해야 한다.

3. 윈도우 메시지에 대응해서 소켓 함수를 호출하면 대부분 성공하지만,
	드물게 WSAEWOULDBLOCK 오류 코드가 발생하는 경우가 있다.

4. 윈도우 메시지를 받았을 때는 적절한 소켓 함수를 반드시 호출해야 한다.
	그렇지 않으면 다음에는 윈도우 메시지가 발생하지 않는다.
	즉, 동일 소켓에 대한 FD_READ같은 이벤트가 다시는 발생하지 않는다.
	만약 적절한 함수를 호출하지 않으면 직접 메시지를 발생시켜야 한다.