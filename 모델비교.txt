각 모델의 장단점은 cpp 파일에 작성해뒀다.

요약하자면 다음과 같다.

1. Select: 윈도우와 리눅스 운영체제 모두 지원된다. 단, 한 스레드가 처리할 수 있는 소켓이 제한적이며 하위 호환성을 위해 제공되는
		구형 모델이다.

2. WSAAsyncSelect: 단일 윈도우 프로시저에서 소켓 메시지도 함께 처리하므로 속도(성능) 저하의 요인이 된다.
				GUI 프로그램과 잘 결합할 수 있으며 MFC의 소켓 클래스에서 내부적으로 사용된다.

3. Completion Port: 복잡한 코딩을 제외하고는 단점이 없다.
			가장 뛰어난 성능을 자랑한다.


마지막으로 이상적인 소켓 입출력 모델에 요구되는 사항을 점검해보고 비교해보자.

1. 소켓 함수 호출 시 블로킹 최소화
	- 모든 모델이 만족한다.

2. 스레드 개수를 일정 수준으로 유지한다.
	- 모든 모델이 만족한다.
	- select와 wsaasyncselect는 기본적으로 단일 스레드이며 completionport는 다중 스레드를 사용한다.
	- wsaasyncselect나 select는 스레드를 추가로 생성하면 개발자가 직접 관리(작업자 스레드)해야 한다는 문제가 있다.
	- completion port는 운영체제가 작업 스레드를 다 관리하므로 가장 이상적이다.

3. 작업 병행(입출력 & CPU명령)
	- 비동기 입출력 방식인 Completion Port만 만족한다.

4. 유저 모드와 커널 모드 전환 횟수(Page Fault) 최소화
	- 비동기 입출력 방식인 Completion Port만 만족한다.
	- 비동기 입출력을 할 때 송신 버퍼나 수신 버퍼가 가득차면
		응용 프로그램 버퍼를 운영체제가 잠궈버린 후 직접 접근한다.
		따라서 유저 <-> 커널 영역 복사가 불필요하므로 모드 전환없이 입출력 작업이 곧바로 이루어진다.